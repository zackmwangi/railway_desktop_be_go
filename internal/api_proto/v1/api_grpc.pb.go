// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: api.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MybackendGrpcSvc_GetUserInfoById_FullMethodName        = "/mybackend.v1.MybackendGrpcSvc/GetUserInfoById"
	MybackendGrpcSvc_GetUserInfoByUsername_FullMethodName  = "/mybackend.v1.MybackendGrpcSvc/GetUserInfoByUsername"
	MybackendGrpcSvc_FetchProjects_FullMethodName          = "/mybackend.v1.MybackendGrpcSvc/FetchProjects"
	MybackendGrpcSvc_CreateService_FullMethodName          = "/mybackend.v1.MybackendGrpcSvc/CreateService"
	MybackendGrpcSvc_CreateServiceFromImage_FullMethodName = "/mybackend.v1.MybackendGrpcSvc/CreateServiceFromImage"
	MybackendGrpcSvc_CreateServiceFromRepo_FullMethodName  = "/mybackend.v1.MybackendGrpcSvc/CreateServiceFromRepo"
	MybackendGrpcSvc_DeleteService_FullMethodName          = "/mybackend.v1.MybackendGrpcSvc/DeleteService"
)

// MybackendGrpcSvcClient is the client API for MybackendGrpcSvc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MybackendGrpcSvcClient interface {
	GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*GetUserInfoByIdResponse, error)
	GetUserInfoByUsername(ctx context.Context, in *GetUserInfoByUsernameRequest, opts ...grpc.CallOption) (*GetUserInfoByUsernameResponse, error)
	// Railway - Projects
	FetchProjects(ctx context.Context, in *FetchProjectRequest, opts ...grpc.CallOption) (*FetchProjectResponse, error)
	CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	CreateServiceFromImage(ctx context.Context, in *CreateServiceFromImageRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	CreateServiceFromRepo(ctx context.Context, in *CreateServiceFromRepoRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error)
	DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error)
}

type mybackendGrpcSvcClient struct {
	cc grpc.ClientConnInterface
}

func NewMybackendGrpcSvcClient(cc grpc.ClientConnInterface) MybackendGrpcSvcClient {
	return &mybackendGrpcSvcClient{cc}
}

func (c *mybackendGrpcSvcClient) GetUserInfoById(ctx context.Context, in *GetUserInfoByIdRequest, opts ...grpc.CallOption) (*GetUserInfoByIdResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoByIdResponse)
	err := c.cc.Invoke(ctx, MybackendGrpcSvc_GetUserInfoById_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mybackendGrpcSvcClient) GetUserInfoByUsername(ctx context.Context, in *GetUserInfoByUsernameRequest, opts ...grpc.CallOption) (*GetUserInfoByUsernameResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserInfoByUsernameResponse)
	err := c.cc.Invoke(ctx, MybackendGrpcSvc_GetUserInfoByUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mybackendGrpcSvcClient) FetchProjects(ctx context.Context, in *FetchProjectRequest, opts ...grpc.CallOption) (*FetchProjectResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FetchProjectResponse)
	err := c.cc.Invoke(ctx, MybackendGrpcSvc_FetchProjects_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mybackendGrpcSvcClient) CreateService(ctx context.Context, in *CreateServiceRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, MybackendGrpcSvc_CreateService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mybackendGrpcSvcClient) CreateServiceFromImage(ctx context.Context, in *CreateServiceFromImageRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, MybackendGrpcSvc_CreateServiceFromImage_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mybackendGrpcSvcClient) CreateServiceFromRepo(ctx context.Context, in *CreateServiceFromRepoRequest, opts ...grpc.CallOption) (*CreateServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateServiceResponse)
	err := c.cc.Invoke(ctx, MybackendGrpcSvc_CreateServiceFromRepo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mybackendGrpcSvcClient) DeleteService(ctx context.Context, in *DeleteServiceRequest, opts ...grpc.CallOption) (*DeleteServiceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteServiceResponse)
	err := c.cc.Invoke(ctx, MybackendGrpcSvc_DeleteService_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MybackendGrpcSvcServer is the server API for MybackendGrpcSvc service.
// All implementations should embed UnimplementedMybackendGrpcSvcServer
// for forward compatibility.
type MybackendGrpcSvcServer interface {
	GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*GetUserInfoByIdResponse, error)
	GetUserInfoByUsername(context.Context, *GetUserInfoByUsernameRequest) (*GetUserInfoByUsernameResponse, error)
	// Railway - Projects
	FetchProjects(context.Context, *FetchProjectRequest) (*FetchProjectResponse, error)
	CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error)
	CreateServiceFromImage(context.Context, *CreateServiceFromImageRequest) (*CreateServiceResponse, error)
	CreateServiceFromRepo(context.Context, *CreateServiceFromRepoRequest) (*CreateServiceResponse, error)
	DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error)
}

// UnimplementedMybackendGrpcSvcServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMybackendGrpcSvcServer struct{}

func (UnimplementedMybackendGrpcSvcServer) GetUserInfoById(context.Context, *GetUserInfoByIdRequest) (*GetUserInfoByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoById not implemented")
}
func (UnimplementedMybackendGrpcSvcServer) GetUserInfoByUsername(context.Context, *GetUserInfoByUsernameRequest) (*GetUserInfoByUsernameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoByUsername not implemented")
}
func (UnimplementedMybackendGrpcSvcServer) FetchProjects(context.Context, *FetchProjectRequest) (*FetchProjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchProjects not implemented")
}
func (UnimplementedMybackendGrpcSvcServer) CreateService(context.Context, *CreateServiceRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateService not implemented")
}
func (UnimplementedMybackendGrpcSvcServer) CreateServiceFromImage(context.Context, *CreateServiceFromImageRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceFromImage not implemented")
}
func (UnimplementedMybackendGrpcSvcServer) CreateServiceFromRepo(context.Context, *CreateServiceFromRepoRequest) (*CreateServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateServiceFromRepo not implemented")
}
func (UnimplementedMybackendGrpcSvcServer) DeleteService(context.Context, *DeleteServiceRequest) (*DeleteServiceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteService not implemented")
}
func (UnimplementedMybackendGrpcSvcServer) testEmbeddedByValue() {}

// UnsafeMybackendGrpcSvcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MybackendGrpcSvcServer will
// result in compilation errors.
type UnsafeMybackendGrpcSvcServer interface {
	mustEmbedUnimplementedMybackendGrpcSvcServer()
}

func RegisterMybackendGrpcSvcServer(s grpc.ServiceRegistrar, srv MybackendGrpcSvcServer) {
	// If the following call pancis, it indicates UnimplementedMybackendGrpcSvcServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MybackendGrpcSvc_ServiceDesc, srv)
}

func _MybackendGrpcSvc_GetUserInfoById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MybackendGrpcSvcServer).GetUserInfoById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MybackendGrpcSvc_GetUserInfoById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MybackendGrpcSvcServer).GetUserInfoById(ctx, req.(*GetUserInfoByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MybackendGrpcSvc_GetUserInfoByUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserInfoByUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MybackendGrpcSvcServer).GetUserInfoByUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MybackendGrpcSvc_GetUserInfoByUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MybackendGrpcSvcServer).GetUserInfoByUsername(ctx, req.(*GetUserInfoByUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MybackendGrpcSvc_FetchProjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchProjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MybackendGrpcSvcServer).FetchProjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MybackendGrpcSvc_FetchProjects_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MybackendGrpcSvcServer).FetchProjects(ctx, req.(*FetchProjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MybackendGrpcSvc_CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MybackendGrpcSvcServer).CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MybackendGrpcSvc_CreateService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MybackendGrpcSvcServer).CreateService(ctx, req.(*CreateServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MybackendGrpcSvc_CreateServiceFromImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceFromImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MybackendGrpcSvcServer).CreateServiceFromImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MybackendGrpcSvc_CreateServiceFromImage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MybackendGrpcSvcServer).CreateServiceFromImage(ctx, req.(*CreateServiceFromImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MybackendGrpcSvc_CreateServiceFromRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateServiceFromRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MybackendGrpcSvcServer).CreateServiceFromRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MybackendGrpcSvc_CreateServiceFromRepo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MybackendGrpcSvcServer).CreateServiceFromRepo(ctx, req.(*CreateServiceFromRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MybackendGrpcSvc_DeleteService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MybackendGrpcSvcServer).DeleteService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MybackendGrpcSvc_DeleteService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MybackendGrpcSvcServer).DeleteService(ctx, req.(*DeleteServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MybackendGrpcSvc_ServiceDesc is the grpc.ServiceDesc for MybackendGrpcSvc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MybackendGrpcSvc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mybackend.v1.MybackendGrpcSvc",
	HandlerType: (*MybackendGrpcSvcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserInfoById",
			Handler:    _MybackendGrpcSvc_GetUserInfoById_Handler,
		},
		{
			MethodName: "GetUserInfoByUsername",
			Handler:    _MybackendGrpcSvc_GetUserInfoByUsername_Handler,
		},
		{
			MethodName: "FetchProjects",
			Handler:    _MybackendGrpcSvc_FetchProjects_Handler,
		},
		{
			MethodName: "CreateService",
			Handler:    _MybackendGrpcSvc_CreateService_Handler,
		},
		{
			MethodName: "CreateServiceFromImage",
			Handler:    _MybackendGrpcSvc_CreateServiceFromImage_Handler,
		},
		{
			MethodName: "CreateServiceFromRepo",
			Handler:    _MybackendGrpcSvc_CreateServiceFromRepo_Handler,
		},
		{
			MethodName: "DeleteService",
			Handler:    _MybackendGrpcSvc_DeleteService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
